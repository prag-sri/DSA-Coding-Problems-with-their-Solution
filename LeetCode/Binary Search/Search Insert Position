********************************************************************************************************************************************************************
                                                                    Search Insert Position
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/search-insert-position/description/


Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104





********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int searchInsert(int[] nums, int target) {
        //STEPS FOR SOLUTION:-
        //1)Using Binary search to find if the target is present in the array or not.
        //2)And if not present then find the next smallest element from target present in the array- and returning the +1 index of it
        //Time Complexity: O(logN)
        //Space Complexity: O(1)

        int n= nums.length;
        int start=0, end=n-1;
        int ans=-1;

        while(start<=end)
        {
            int mid= (start+end)/2;
            System.out.println(nums[mid]);

            if(nums[mid]==target)
                return mid;

            if(nums[mid]<target)
                ans= Math.max(mid,ans);

            if(target<=nums[mid])
                end= mid-1;
            else
                start= mid+1;
        }

        return ans+1;
    }
}
