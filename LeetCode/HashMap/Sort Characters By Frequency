********************************************************************************************************************************************************************
                                                               Sort Characters By Frequency
********************************************************************************************************************************************************************


LeetCode Link:- https://leetcode.com/problems/sort-characters-by-frequency/

Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.




********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public String frequencySort(String s) {
        //STEPS FOR SOLUTION:-
        //1)Create a Hashmap where all the ascii values of the chars of the string will be stored with their frequencies
        //2)Copy all these key value pairs into the arraylist
        //3)Using Collections.sort- sort the arraylist based on the frequency
        //4)Create a new string and copy all the chars using ascii value and their frequencies into the ans string
        //Time Complexity:-O(NlogN)- Collections.sort
        //Space Complexity:- O(N)- hashmap  + O(N)- arraylist + O(N)- ans string= O(N)- overall
        
        int n= s.length();        
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0; i<n; i++)
        {
            int num= (int)s.charAt(i);
            map.put(num,map.getOrDefault(num,0)+1);
        }
        
        List<List<Integer>> arr= new ArrayList<>();
        for(Integer key: map.keySet())
        {
            List<Integer> curr= new ArrayList<>();
            curr.add(key);
            curr.add(map.get(key));
            arr.add(curr);
        }
        
        Collections.sort(arr,(a,b) ->  a.get(1)<b.get(1)?1:-1);
        
        String ans="";
        for(int i=0; i<arr.size(); i++)
        {
            int num= arr.get(i).get(0);
            char ch= (char)(num);
            int freq= arr.get(i).get(1);
            while(freq>0)
            {
                ans=ans+ch;
                freq--;
            }
        }
        return ans;
    }
}
