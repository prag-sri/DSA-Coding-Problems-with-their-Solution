********************************************************************************************************************************************************************
                                                                      Third Maximum Number
********************************************************************************************************************************************************************

LeetCode Link:- https://leetcode.com/problems/third-maximum-number/description/


Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

Follow up: Can you find an O(n) solution?


********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int thirdMax(int[] nums) {
        int n= nums.length;
        long max= Long.MIN_VALUE, secmax= Long.MIN_VALUE, thirdmax= Long.MIN_VALUE;
        int count=0;
        for(int i=0; i<n; i++)
        {
            if(max<nums[i])
            {
                thirdmax= secmax;
                secmax= max;
                max= nums[i];
                count++;
            }
            else if(secmax<nums[i] && nums[i]!=max)
            {
                thirdmax= secmax;
                secmax= nums[i];
                count++;
            }
            else if(thirdmax<=nums[i] && nums[i]!=secmax && nums[i]!=max)
            {
                thirdmax= nums[i];
                count++;
            }
            //System.out.println(i+" "+max+" "+secmax+" "+thirdmax);
        }

        //System.out.println(flag);
        if(count<=2)
            return (int)max;
        return (int)thirdmax;
    }
}
