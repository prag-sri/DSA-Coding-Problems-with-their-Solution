********************************************************************************************************************************************************************
                                                                           Quick Sort
********************************************************************************************************************************************************************

Quick Sort:- Here we are taking last element of the array as pivot and based on this pivot are making two halves of the array where 1st half are the elements 
smaller than pivot and 2nd half are the elements which are greater than pivot
After finding the partition we are repeating the same processes for 1st and 2nd halves of the array
This technique uses 'Divide and Conquer' technique

Time Complexity: O(N)
Space Complexity: O(N)


********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		int n= sc.nextInt();
		int arr[]= new int[n];
		for(int i=0; i<n; i++)
		{
		    arr[i]= sc.nextInt();
		}
		    
		divide(0,n-1,arr);
        
		
		for(int i=0; i<n; i++)
		    System.out.print(arr[i]+" ");
	}
	
	public static void divide(int start, int end, int[] arr)
	{
	    if(start>=end)
	        return;
	       
	    int p= partition(start,end,arr);
	    
	    divide(start,p-1,arr);
	    divide(p+1,end,arr);
	}
	
	public static int partition(int start, int end, int[] arr)
	{
	    int pivot= arr[end];
	    
	    //here j will always be pointing to the smaller elements than pivot and i should always be pointing to eleemnts greater than pivot
	    
	    int j= start;
	    for(int i=start; i<end; i++)
	    {
	        if(arr[i]<pivot)
	        {
	            int temp= arr[j];
	            arr[j]= arr[i];
	            arr[i]= temp;
	            j++;
	        }
	    }
	    
	    int tmp= arr[j];
	    arr[j]= arr[end];
	    arr[end]= tmp;
	    
	    return j;
	}
}
