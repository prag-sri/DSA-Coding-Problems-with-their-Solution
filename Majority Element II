//Majority Element II
//LeetCode Link:- https://leetcode.com/problems/majority-element-ii/

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        //STEPS FOR SOLUTION:- Using Boyer-Moore Majority Vote algorithm
        //Note:-There can be at most k - 1 major element in an array if the major element appears more than ⌊n / k⌋ times.
        //1)Since there can be atmost two majority element take four varaibles- count1, num1, count2, num2
        //2)Cases to check:-
        //    a)If nums[i]==num1 -> if count1=0 then count1=1 and num1=nums[i]             //                          if count2>0 then count2-- 
        //                          if count2==0 then count2=1 and num2=nums[i]
        //    b)If nums[i]==num2 -> if count2=0 then count2=1 and num2=nums[i]             //                          if count1>0 then count1-- 
        //                          if count1==0 then count1=1 and num1=nums[i]
        //    c)If nums[i]!=num1 and num2 -> count1-- and count2--
        //3)At the end check the counts of num1 and num2 whether they are greater than n/k or not
        
        int n= nums.length;
        int count1=0, count2=0, num1=0, num2=0;
        for(int i=0; i<n; i++)
        {
            if(nums[i]==num1)
                count1++; 
            else if(nums[i]==num2)
                count2++;           
            else if(count1==0)
            {
                count1=1;
                num1=nums[i];
            }
            else if(count2==0)
            {
                count2=1;
                num2=nums[i];
            }
            else
            {
                count1--;
                count2--;
            }      
        }
        
        count1=0; count2=0;
        for(int i=0; i<n; i++)
        {
            if(nums[i]==num1)
                count1++;
            else if(nums[i]==num2)
                count2++;
        }
        
        List<Integer> ans= new ArrayList<>();
        if(count1>n/3)
            ans.add(num1);
        if(count2>n/3)
            ans.add(num2);
        
        return ans;
        
    }
}
