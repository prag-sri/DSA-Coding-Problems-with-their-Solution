********************************************************************************************************************************************************************
                                                                         Facing the sun
********************************************************************************************************************************************************************


GFG Link:- https://practice.geeksforgeeks.org/problems/facing-the-sun2126/1

Given an array H representing heights of buildings. You have to count the buildings which will see the sunrise (Assume : Sun rise on the side of array starting point).


Example 1:

Input: 
N = 5
H[] = {7, 4, 8, 2, 9}
Output: 3
Explanation: As 7 is the first element, it
can see the sunrise. 4 can't see the
sunrise as 7 is hiding it.  8 can see.
2 can't see the sunrise. 9 also can see
the sunrise.
Example 2:

Input: 
N = 4
H[] = {2, 3, 4, 5}
Output: 4
Explanation: As 2 is the first element, it
can see the sunrise.  3 can see the
sunrise as 2 is not hiding it. Same for 4
and 5, they also can see the sunrise.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function countBuildings() which takes the array of integers h and n as parameters and returns an integer denoting the answer.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 106
1 ≤ Hi ≤ 108



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    int countBuildings(int h[], int n) {
        //STEPS FOR SOLUTION:-
        //1)Create a stack for storing the max element of the array as the peek element
        //2)If the stack is empty then push the current element into the stack
        //3)Traverse into the array and check if h[i] is smaller than or greater than peek element of stack
        //4)If it is smaller or equal move on to next element
        //5)If it is greater then pop the current peek element of stack and push the current element
        //6)Also keep a tab using count variable whenever element is getting pushed into stack
        
        Stack<Integer> st= new Stack<>();
        int count=0;
        for(int i=0; i<n; i++)
        {
            if(st.isEmpty())
            {
               st.push(h[i]);
               count++;
            }
            else if(!st.isEmpty() && st.peek()<h[i])
            {
                st.pop();
                st.push(h[i]);
                count++;
            }
        }
        return count;
    }
}
