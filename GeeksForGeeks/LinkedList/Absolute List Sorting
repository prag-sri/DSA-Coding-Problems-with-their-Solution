********************************************************************************************************************************************************************
                                                                    Absolute List Sorting
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/absolute-list-sorting/1


Given a linked list of N nodes, sorted in ascending order based on the absolute values of its data,i.e. negative values are considered as positive ones. Sort the linked list in ascending order according to the actual values, and consider negative numbers as negative and positive numbers as positive.


Example 1:

Input: 
List: 1, -2, -3, 4, -5
Output: 
List: -5, -3, -2, 1, 4
Explanation: 
Actual sorted order of {1, -2, -3, 4, -5}
is {-5, -3, -2, 1, 4}
 

Example 2:

Input: 
List: 5, -10
Output: 
List: -10, 5
Explanation:
Actual sorted order of {5, -10}
is {-10, 5}
 

Your Task:
You don't need to read or print anything. Your Task is to complete the function sortList() which takes the head of the Linked List as input parameter and sort the list in ascending order and return the head pointer of the sorted list.

 

Expected Time Complexity: O(N)
Expected Space Complexity: O(1)


Constraints
1 ≤  N  ≤ 10^5
-10^5 ≤  node.data ≤ 10^5




********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 1
********************************************************************************************************************************************************************

class Solution
{
	Node sortList(Node head) {
		//STEPS FOR SOLUTION:-
		//1)Traversing into the LinkedList and storing all the values in an arraylist
		//2)Sort the ArrayList using Collections.sort
		//3)Again traverse the LinkedList and the ArrayList- update the values of LinkedList as per ith index element value of ArrayList
		//4)At the end return the head of the modified LinkedList
		//Time Complexity:- O(N+ NlogN) because we are traversing the LinkedList(O(N)) and also using Collections.sort(O(NlogN))
		//Space Complexity:- O(N) because of ArrayList
		
		ArrayList<Integer> temp= new ArrayList<>();
		Node curr= head;
		while(curr!=null)
		{
		    temp.add(curr.data);
		    curr= curr.next;
		}
		
		Collections.sort(temp);
		
		curr= head;
		int i=0;
		while(curr!=null)
		{
		    curr.data= temp.get(i);
		    curr= curr.next;
		    i++;
		}
		
		return head;
	}
}



********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 2
********************************************************************************************************************************************************************

class Solution
{
	Node sortList(Node head) {
		//STEPS FOR SOLUTION:-
		//1) 1   ->   -2   ->   -3   ->   4   ->   -5
		//   prev    curr       nxt
		//2) If curr.data<0 then modify connections- make curr as head i.e. curr.next= head
		//3) -2   -> <-  1      -3   ->   4   ->   -5
		//   curr       prev    nxt 
		//4) Also make prev.next= nxt and then head= curr
		//5) -2         ->    1    ->   -3   ->   4   ->   -5
		//   curr/head       prev       nxt 
		//6) Now just update prev, curr and nxt
		//7) -2   ->   1   ->   -3   ->   4   ->   -5
		//            prev     curr      nxt
		
		//Time Complexity: O(N)
		//Space Complexity: O(1)
		
		if(head==null || head.next==null)
		    return head;
		    
		Node prev= head;
		Node curr= head.next;
		
		while(curr!=null)
		{
		    if(curr.data<0)
		    {
		        Node nxt= curr.next;
		        prev.next= nxt;
		        curr.next= head;
		        head= curr;
		        curr= prev.next;
		    }
		    else
		    {
		       prev= curr;
		       curr= curr.next; 
		    }
		    
		}
		
		return head;
	}
}
