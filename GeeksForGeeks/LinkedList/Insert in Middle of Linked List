********************************************************************************************************************************************************************
                                                               Insert in Middle of Linked List
********************************************************************************************************************************************************************


GFG Link:- https://practice.geeksforgeeks.org/problems/insert-in-middle-of-linked-list/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Given a linked list of size N and a key. The task is to insert the key in the middle of the linked list.

Example 1:

Input:
LinkedList = 1->2->4
key = 3
Output: 1 2 3 4
Explanation: The new element is inserted
after the current middle element in the
linked list.
Example 2:

Input:
LinkedList = 10->20->40->50
key = 30
Output: 10 20 30 40 50
Explanation: The new element is inserted
after the current middle element in the
linked list and Hence, the output is
10 20 30 40 50.
 

Your Task:
The task is to complete the function insertInMiddle() which takes head reference and element to be inserted as the arguments. The printing is done automatically by the driver code.

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)

Constraints:
1 <= N <= 104



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    
    public Node insertInMid(Node head, int data){
        //STEPS FOR SOLUTION:-
        //1)Find the mid of the linked list using slow and fast pointers
        //2)Create the new node using data provided
        //3)Link it to the next of slow and new node's next will become slow.next- and return head
        //Time Complexity:- O(N/2) -> O(N)
        //Space Complexity:- O(1)
        
        Node slow= head;
        Node fast= head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow= slow.next;
            fast= fast.next.next;
        }
        Node nxt= slow.next;
        Node newNode= new Node(data);
        slow.next= newNode;
        newNode.next= nxt;
        return head;
    }
}
