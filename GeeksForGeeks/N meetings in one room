********************************************************************************************************************************************************************
                                                              N meetings in one room
********************************************************************************************************************************************************************


GFG Link:- https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.


Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)
Example 2:

Input:
N = 3
start[] = {10, 12, 20}
end[] = {20, 25, 30}
Output: 
1
Explanation:
Only one meetings can be held
with given start and end timings.

Your Task :
You don't need to read inputs or print anything. Complete the function maxMeetings() that takes two arrays start[] and end[] along with their size N as input parameters and returns the maximum number of meetings that can be held in the meeting room.


Expected Time Complexity : O(N*LogN)
Expected Auxilliary Space : O(N)


Constraints:
1 ≤ N ≤ 105
0 ≤ start[i] < end[i] ≤ 105




********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class meeting
{
    int start;
    int end;
    int pos;
    meeting(int start, int end, int pos)
    {
        this.start=start;
        this.end=end;
        this.pos=pos;
    }
}
class meetingComparator implements Comparator<meeting>
{
    //-1 means dont sort and 1 means sort
    public int compare(meeting o1, meeting o2)
    {
        if(o1.end==o2.end)
        {
            if(o1.pos<o2.pos)
                return -1;
            else
                return 1;
        }
        else if(o1.end>o2.end)
            return 1;
        return -1;
    }
}
class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        ArrayList<meeting> meet= new ArrayList<>();
        for(int i=0; i<n; i++)
            meet.add(new meeting(start[i],end[i],i+1));
            
        meetingComparator mc= new meetingComparator();
        
        Collections.sort(meet,mc);
        
        int finish= meet.get(0).end;
        
        int count=1;
        for(int i=1; i<n; i++)
        {
            if(meet.get(i).start>finish)
            {
                count++;
                finish= meet.get(i).end;
            }
        }
        
        return count;
    }
}
