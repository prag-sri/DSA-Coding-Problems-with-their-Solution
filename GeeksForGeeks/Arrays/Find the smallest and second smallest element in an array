********************************************************************************************************************************************************************
                                                     Find the smallest and second smallest element in an array
********************************************************************************************************************************************************************


GFG Link:- https://practice.geeksforgeeks.org/problems/find-the-smallest-and-second-smallest-element-in-an-array3226/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Given an array of integers, your task is to find the smallest and second smallest element in the array. If smallest and second smallest do not exist, print -1.

Example 1:

Input :
5
2 4 3 5 6
Output :
2 3 
Explanation: 
2 and 3 are respectively the smallest 
and second smallest elements in the array.

Example 2:

Input :
6
1 2 1 3 6 7
Output :
1 2 
Explanation: 
1 and 2 are respectively the smallest 
and second smallest elements in the array.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function minAnd2ndMin() which takes the array A[] and its size N as inputs and returns a vector containing the smallest and second smallest element if possible, else return {-1,-1}.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1<=N<=105
1<=A[i]<=105



********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 1
********************************************************************************************************************************************************************

class Compute 
{
    public long[] minAnd2ndMin(long a[], long n)  
    {
        //STEPS FOR SOLUTION:-
        //1)Sort the array and return the first two elements of array a
        //2)Also do check that both smallest is not equal to second smallest
        //3)If second smallest does not exist then simply return -1 as the only element of array
        //Time Complexity:- O(NlogN)
        //Space Complexity:- O(1)
        
        Arrays.sort(a);
        int i=1;
        while(i<n && a[i]==a[0])
            i++;
            
        if(i!=n)
        {
            long ans[]= new long[2];
            ans[0]= a[0];
            ans[1]= a[i];
            return ans;
        }
        long ans[]= new long[1];
        ans[0]=-1l;
        return ans;
    }
}





********************************************************************************************************************************************************************
                                                                               CODE- APPROACH 2
********************************************************************************************************************************************************************

class Compute 
{
    public long[] minAnd2ndMin(long a[], long n)  
    {
        //STEPS FOR SOLUTION:-
        //1)Without using any extra space, create two variables 'first' and last
        //2)First will store the first minimum element while last will store second minimum element
        //3)Now traverse into the array and check if current element is smaller than first or not- if smaller then put a[i]= first and value of first will be stored into sec
        //4)Also keep a check if the current element is smaller than last- if it is update last
        //5)If last is not set then simply return -1
        
        long first=Integer.MAX_VALUE, last= Integer.MAX_VALUE;
        
        for(int i=0; i<n; i++)
        {
            if(first>a[i])
            {
                last=first;
                first=a[i];
            }
            else if(last>a[i] && first!=a[i])
                last=a[i];
        }
        
        if(last==Integer.MAX_VALUE)
        {
            long ans[]={-1};
            return ans;
        }
        long ans[]= new long[2];
        ans[0]=first;
        ans[1]=last;
        return ans;
    }
}

