//Maximum Sum of Distinct Subarrays With Length K
//LeetCode Link:- https://leetcode.com/contest/weekly-contest-318/problems/maximum-sum-of-distinct-subarrays-with-length-k/

class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        //STEPS FOR SOLUTION:-
        //1)Take two pointers start and end where start will be pointing to the start of subarray and end=start+k- end pointer will move one by one until end!=start+k, also it will keep on checking for any repeated elements
        //2)To keep track of elements whether they are repeated or not create a hashmap in which we will put elements from start to end- nums[i] will be key and its frequency will be value
        //3)As soon as element is found to repeating end=end+1 and start=end and repeat the process again
        //4)Also when the sum of subarray from start to end is found we will move start and end pointers- so before moving we will remove start element from hashmap and add end+1 element into the array and check if it is repeating or not- if not repeating then end+1 otherwise end=end+1 and start=end
        
        int n= nums.length;     
        HashMap<Integer,Integer> map= new HashMap<>();
        int start=0, end=0;
        long sum=0l, maxSum= 0l;
        while(end<n)
        {
            sum= sum+nums[end];
            if(!map.containsKey(nums[end]))
                map.put(nums[end],1);                   
            else
            {
                map.clear();
                map.put(nums[end],1);
                sum=nums[end];
                start=end;
            }
                            
            if(end==start+k-1)
            {
                maxSum= Math.max(maxSum,sum);
                sum=sum-nums[start];
                map.remove(nums[start]);
                start++;
            }
            //System.out.println(sum+" "+maxSum);
            end++;
        }
        return maxSum;
    }
}
