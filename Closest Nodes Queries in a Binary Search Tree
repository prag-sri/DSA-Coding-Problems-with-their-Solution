********************************************************************************************************************************************************************
                                                              Closest Nodes Queries in a Binary Search Tree
********************************************************************************************************************************************************************


LeetCode Link:- https://leetcode.com/contest/weekly-contest-320/problems/closest-nodes-queries-in-a-binary-search-tree/

You are given the root of a binary search tree and an array queries of size n consisting of positive integers.

Find a 2D array answer of size n where answer[i] = [mini, maxi]:

mini is the largest value in the tree that is smaller than or equal to queries[i]. If a such value does not exist, add -1 instead.
maxi is the smallest value in the tree that is greater than or equal to queries[i]. If a such value does not exist, add -1 instead.
Return the array answer.

 

Example 1:


Input: root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]
Output: [[2,2],[4,6],[15,-1]]
Explanation: We answer the queries in the following way:
- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].
- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].
- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1].
Example 2:


Input: root = [4,null,9], queries = [3]
Output: [[-1,4]]
Explanation: The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4].
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
1 <= Node.val <= 106
n == queries.length
1 <= n <= 105
1 <= queries[i] <= 106




********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

//NOTE:- Below code is only passing 36 out of 37 cases and is giving TLE for the last test case

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max, min;
    public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
        //STEPS FOR SOLUTION:-
        //1)Create a function from which each query will be passed one by one until for all ans has been found
        //2)Take the first query- firstly pass it into largest function and then after getting ans for largest pass the query into the smallest function
        //3)Logic for largest function- traverse into the tree taking a variable 'max' which has initialized as -1 - check if root.val is less, greater or equal to query- if root.val==query then return root.val; if root.val greater than query then compare it with max and store minimum out of the two and then move to left subtree; if root.val less than query then move to right subtree
        //3)Logic for smallest function- traverse into the tree taking a variable 'min' which has initialized as -1 - check if root.val is less, greater or equal to query- if root.val==query then return root.val; if root.val greater than query then move to left subtree; if root.val less than query then compare it with min and store maximum out of the two and then move to right subtree
        
        List<List<Integer>> ans= new ArrayList<>();
        int size= queries.size();
        for(int i=0; i<size; i++)
        {
            List<Integer> curr= new ArrayList<>();
            int q= queries.get(i);
            max=Integer.MAX_VALUE; min=Integer.MIN_VALUE;
            
            smallest(root,q);
            if(min==Integer.MIN_VALUE)
                min=-1;
            curr.add(min);
            
            largest(root,q);
            if(max==Integer.MAX_VALUE)
                max=-1;
            curr.add(max);
            
            ans.add(curr);
        }
        return ans;
    }
    public void largest(TreeNode root, int q)
    {
        if(root==null)
            return;
        if(root.val==q)
        {
            max= root.val;
            return;
        }
        else if(root.val>q)
        {
            if(max>root.val){
                max=root.val;
                largest(root.left,q);
            }
            else
                largest(root.right,q);
        }
        else
            largest(root.right,q);
    }
    public void smallest(TreeNode root, int q)
    {
        if(root==null)
            return;
        if(root.val==q)
        {
            min= root.val;
            return;
        }
        else if(root.val<q)
        {
            min= Math.max(min,root.val);
            smallest(root.right,q);
        }
        else
            smallest(root.left,q);
    }
}
