//Sort k nodes of Linked List using Merge Sort

import java.util.Scanner;
public class Main
{
    static class Node
    {
        int data;
        Node next;
        Node(){}
        Node(int data)
        {
            this.data= data;
            this.next= null;
        }
    }
    static Node head;
    static Node tail;
    public static Node insertAtLast(int data)
    {
        Node curr= new Node(data);
        if(head==null)
        {
            head= curr;
            tail= curr;
        }
        else
        {
            tail.next= curr;
            tail= curr;
        }
        return head;
    }
    public static void print(Node head)
    {
        Node tmp= head;
        while(tmp!=null)
        {
            System.out.print(tmp.data+" ");
            tmp= tmp.next;
        }
    }
    public static Node sortDivide(Node head)
    {
        if(head==null || head.next==null)
            return head;
        //finding mid of the linked list
        Node slow= head;
        Node fast= head;
        Node prev= null;
        while(fast!=null && fast.next!=null)
        {
            prev= slow;
            slow= slow.next;
            fast= fast.next.next;
        }
        prev.next= null;
        Node first_part= sortDivide(head);
        Node second_part= sortDivide(slow);
        
        return sortConquer(first_part, second_part);
    }
    public static Node sortConquer(Node first, Node sec)
    {
        if(first==null && sec!=null) 
            return sec;
        else if(first!=null && sec==null) 
            return first;
        else if(first==null && sec==null) 
            return null;
            
        Node ansHead= null;
        Node ansTail= null;
        Node tmp1= first;
        Node tmp2= sec;
        
        while(tmp1!=null && tmp2!=null)
        {
            if(tmp1.data<tmp2.data)
            {
                if(ansHead==null && ansTail==null)
                {
                    ansHead= tmp1;
                    ansTail= tmp1;
                }
                else
                {
                    ansTail.next= tmp1;
                    ansTail= tmp1;
                }
                tmp1= tmp1.next;
            }
            else
            {
                if(ansHead==null && ansTail==null)
                {
                    ansHead= tmp2;
                    ansTail= tmp2;
                }
                else
                {
                    ansTail.next= tmp2;
                    ansTail= tmp2;
                }
                tmp2= tmp2.next;
            }
            ansTail.next= null;
        }
        if(tmp1!=null)
            ansTail.next= tmp1;
        if(tmp2!=null)
            ansTail.next= tmp2;
        return ansHead;
    }
    public static Node count(Node head, int k)
    {
        if(head==null)
            return head;
        int i=1;
        Node tmp= head;
        while(i<k && tmp!=null)
        {
            tmp= tmp.next;
            i++;
        }
        Node next= tmp.next;        //next is 3
        tmp.next= null;
        head= sortDivide(head);
        tmp= head;
        while(tmp.next!=null)
            tmp= tmp.next;
        tmp.next= count(next,k);
        return head;
    }
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		int n= sc.nextInt();
		int k= sc.nextInt();
		Node head= new Node();
		for(int i=0; i<n; i++)
		    head= insertAtLast(sc.nextInt());
		
		head= count(head,k);
		print(head);
	}
}
